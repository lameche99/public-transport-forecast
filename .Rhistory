import pandas
quit()
import pandas
import pandas
import pandas as pd
import numoy as np
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
#| echo: false
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
print(r.treasury_volume.describe())
print(r.treasury_volume.index)
print(r.treasury_volume.date)
for df in r.variables:
print(df.describe())
for df in r.variables:
print(df.describe())
for df in r.variables:
print(df.describe())
# Function to get descriptive stats
def get_descriptive_stats(data: pd.DataFrame):
return data.describe()
# Function to get descriptive stats
def get_descriptive_stats(data: pd.DataFrame):
return data.describe()
View(df)
View(df)
# Functions to plot time series
print(r.variables[0].columns[0])
# Functions to plot time series
#def create_trace(y_lab: str, x_val, y_val)
print(type(r.variables[0]['date']))
# Functions to plot time series
def create_trace(y_lab: str, x_val: pd.Series, y_val: pd.Series):
fig = go.Scatter(
x = x_val, y = y_val, name = y_lab, mode = 'line'
)
return fig
def plot_time_series(data: pd.DataFrame, name: str):
fig = go.Figure()
for value in data.columns[1:]:
fig.add_trace(create_trace(value, data['date'], data[value]))
fig.update_layout(title = name + " - Time Series Plot", xaxis_title = "Date", yaxis_title = "Volume")
return fig
# Functions to plot time series
def create_trace(y_lab: str, x_val: pd.Series, y_val: pd.Series):
fig = go.Scatter(
x = x_val, y = y_val, name = y_lab, mode = 'line'
)
return fig
def plot_time_series(data: pd.DataFrame, name: str):
fig = go.Figure()
for value in data.columns[1:]:
fig.add_trace(create_trace(value, data['date'], data[value]))
fig.update_layout(title = name + " - Time Series Plot", xaxis_title = "Date", yaxis_title = "Volume")
return fig
fig = plot_time_series(r.variables[0], r.names[0])
fig.show(renderer="notebook")
# Functions to plot time series
def create_trace(y_lab: str, x_val: pd.Series, y_val: pd.Series):
fig = go.Scatter(
x = x_val, y = y_val, name = y_lab, mode = 'lines'
)
return fig
def plot_time_series(data: pd.DataFrame, name: str):
fig = go.Figure()
for value in data.columns[1:]:
fig.add_trace(create_trace(value, data['date'], data[value]))
fig.update_layout(title = name + " - Time Series Plot", xaxis_title = "Date", yaxis_title = "Volume")
return fig
# Functions to plot time series
def create_trace(y_lab: str, x_val: pd.Series, y_val: pd.Series):
fig = go.Scatter(
x = x_val, y = y_val, name = y_lab, mode = 'lines'
)
return fig
def plot_time_series(data: pd.DataFrame, name: str):
fig = go.Figure()
for value in data.columns[1:]:
fig.add_trace(create_trace(value, data['date'], data[value]))
fig.update_layout(title = name + " - Time Series Plot", xaxis_title = "Date", yaxis_title = "Volume")
return fig
fig = plot_time_series(r.variables[0], r.names[0])
fig.show(renderer="notebook")
fig = plot_time_series(r.variables[0], r.names[0])
fig.show(renderer="notebook")
install.packages('tidyr')
library(MASS)
library(tidyverse)
library(ggplot2)
setwd('~/Desktop/ISYE6414/public-transport-forecasting')
transport <- read.table('./data/final_transportation.csv', sep = ',', header = TRUE)[,-1]
transport$Mode <- as.factor(transport$Mode)
transport$Season <- as.factor(transport$Season)
boxplot(pubRate~Season, xlab = 'Season', ylab = 'Rate of Public Transport Use', data = transport)
boxplot(pubRate~Mode, xlab = 'Mode', ylab = 'Rate of Public Transport Use', data = transport)
trans.pois <- glm(UPT ~ Season + Mode + RE + Unemployment + WTI + AutoSales + CPI + CPIcn + CPIcu + offset(log(population)), data = transport, family = 'poisson')
summary(trans.pois)
devi.std <- deviance(trans.pois)
devi.std.p <- 1 - pchisq(devi.std, 1790)
round(c(devi.std, devi.std.p), 2)
pears <- residuals(trans.pois, type = 'pearson')
pearson <- sum(pears^2)
pears.p <- 1 - pchisq(pearson, 1790)
round(c(pearson, pears.p), 2)
dev.resid <- residuals(trans.pois, type = 'deviance')
outliers <- which(abs(dev.resid)>qnorm(0.99995))
length(outliers)
wdf <- trans.pois$df.residual
overdispersion <- trans.pois$deviance / wdf
overdispersion
#Quasi-Poisson
trans.quasi <- glm(UPT ~ Season + Mode + RE + Unemployment + WTI + AutoSales + CPI + CPIcn + CPIcu, offset = offset(log(population)), data = transport, family = 'quasipoisson')
#Negative Binomial
trans.neg.bin <- glm.nb(UPT ~.-pubRate, data = transport, link = log, init.theta = 10)
summary(trans.quasi)
summary(trans.neg.bin)
#Negative Binomial
trans.neg.bin <- glm.nb(UPT ~.-pubRate - Date, data = transport, link = log, init.theta = 10)
summary(trans.neg.bin)
#Negative Binomial
trans.neg.bin <- glm.nb(UPT ~.-pubRate - Date, data = transport, link = log, init.theta = 20)
#Negative Binomial
trans.neg.bin <- glm.nb(UPT ~.-pubRate - Date, data = transport, link = log, init.theta = 5)
summary(trans.neg.bin)
with(trans.quasi, cbind(res.deviance = deviance, df = df.residual, p = 1 - pchisq(deviance, df.residual)))
with(trans.neg.bin, cbind(res.deviance = deviance, df = df.residual, p = 1 - pchisq(deviance, df.residual)))
qqnorm(residuals(trans.neg.bin), col = 'blue')
qqline(residuals(trans.neg.bin), col = 'red')
hist(residuals(trans.neg.bin), nclass = 20, col = 'blue', border = 'gold', main = 'Histograms of Residuals')
qqnorm(residuals(trans.quasi), col = 'blue')
qqline(residuals(trans.quasi), col = 'red')
hist(residuals(trans.quasi), nclass = 20, col = 'blue', border = 'gold', main = 'Histograms of Residuals')
qqnorm(residuals(trans.pois), col = 'blue')
qqline(residuals(trans.pois), col = 'red')
hist(residuals(trans.pois), nclass = 20, col = 'blue', border = 'gold', main = 'Histograms of Residuals')
qqnorm(residuals(trans.neg.bin), col = 'blue')
qqline(residuals(trans.neg.bin), col = 'red')
hist(residuals(trans.neg.bin), nclass = 20, col = 'blue', border = 'gold', main = 'Histograms of Residuals')
clean <- transport[-c(1, 13)]
n <- dim(clean)[1]
nrow(clean)
mse <- function(pred, data){
mean((pred - data)^2)
}
mae <- function(pred, data) {
mean(abs(pred - data))
}
mape <- function(pred, data) {
mean(abs(pred - data) / abs(data))
}
pm <- function(pred, data) {
sum((pred - data)^2) / sum((data - mean(data))^2)
}
prediction <- function(model, test) {
pred <- predict(model, test, type = 'response')
test.pred <- pred
pred.metrics <- c(
mse(test.pred, test$UPT),
mae(test.pred, test$UPT),
mape(test.pred, test$UPT),
pm(test.pred, test$UPT)
)
return(pred.metrics)
}
## prepare data for prediction
clean <- transport[-c(1, 13)]
n <- nrow(clean)
View(clean)
View(clean)
set.seed(6414)
poisson.meas <- matrix(0,4,100)
for (i in 1:100) {
sample.size <- floor(0.8*n)
sample.obs <- sample(seq_len(n), size = sample.size)
train.pois.curr <- clean[sample.obs,]
test.pois.curr <- clean[-sample.obs,]
pois.train <- glm(UPT ~. + offset(log(population)), data = train.pois.curr, family = 'poisson')
poisson.meas[,i] <- prediction(pois.train, test.pois.curr)
}
pois.res <- round(apply(poisson.meas, mean), 4)
pois.res <- round(apply(poisson.meas, 1, mean), 4)
pois.res
## Quasi-Poisson Monte-Carlo
set.seed(6414)
quasi.meas <- matrix(0,4,100)
for (i in 1:100) {
sample.size <- floor(0.8*n)
sample.obs <- sample(seq_len(n), size = sample.size)
train.quasi.curr <- clean[sample.obs,]
test.quasi.curr <- clean[-sample.obs,]
quasi.train <- glm(UPT ~. - population, offset = offset(log(population)), data = train.pois.curr, family = 'quasipoisson')
quasi.meas[,i] <- prediction(quasi.train, test.quasi.curr)
}
quasi.res <- round(apply(quasi.meas, 1, mean), 4)
quasi.res
## Negative Binomial Monte-Carlo
set.seed(6414)
neg.bin.meas <- matrix(0,4,100)
for (i in 1:100) {
sample.size <- floor(0.8*n)
sample.obs <- sample(seq_len(n), size = sample.size)
train.neg.bin.curr <- clean[sample.obs,]
test.neg.bin.curr <- clean[-sample.obs,]
neg.bin.train <- glm.nb(UPT ~., data = train.neg.bin.curr, link = log, init.theta = 5)
neg.bin.meas[,i] <- prediction(neg.bin.train, test.neg.bin.curr)
}
neg.bin.res <- round(apply(neg.bin.meas, 1, mean), 4)
neg.bin.res
cbind.data.frame(pois.res, quasi.res, neg.bin.res)
transpose(cbind.data.frame(pois.res, quasi.res, neg.bin.res))
cbind.data.frame(pois.res, quasi.res, neg.bin.res)
round(cbind.data.frame(pois.res, quasi.res, neg.bin.res),4)
neg.bin.res
round(neg.bin.res,4)
round(neg.bin.res,2)
mse <- function(pred, data){
round(mean((pred - data)^2), 4)
}
mae <- function(pred, data) {
round(mean(abs(pred - data)), 4)
}
mape <- function(pred, data) {
round(mean(abs(pred - data) / abs(data)), 4)
}
pm <- function(pred, data) {
round(sum((pred - data)^2) / sum((data - mean(data))^2), 4)
}
prediction <- function(model, test) {
pred <- predict(model, test, type = 'response')
test.pred <- pred
pred.metrics <- c(
mse(test.pred, test$UPT),
mae(test.pred, test$UPT),
mape(test.pred, test$UPT),
pm(test.pred, test$UPT)
)
return(pred.metrics)
}
## prepare data for prediction
clean <- transport[-c(1, 13)]
n <- nrow(clean)
## Poisson Monte-Carlo
set.seed(6414)
poisson.meas <- matrix(0,4,100)
for (i in 1:100) {
sample.size <- floor(0.8*n)
sample.obs <- sample(seq_len(n), size = sample.size)
train.pois.curr <- clean[sample.obs,]
test.pois.curr <- clean[-sample.obs,]
pois.train <- glm(UPT ~. + offset(log(population)), data = train.pois.curr, family = 'poisson')
poisson.meas[,i] <- prediction(pois.train, test.pois.curr)
}
pois.res <- round(apply(poisson.meas, 1, mean), 4)
pois.res
## Quasi-Poisson Monte-Carlo
set.seed(6414)
quasi.meas <- matrix(0,4,100)
for (i in 1:100) {
sample.size <- floor(0.8*n)
sample.obs <- sample(seq_len(n), size = sample.size)
train.quasi.curr <- clean[sample.obs,]
test.quasi.curr <- clean[-sample.obs,]
quasi.train <- glm(UPT ~. - population, offset = offset(log(population)), data = train.pois.curr, family = 'quasipoisson')
quasi.meas[,i] <- prediction(quasi.train, test.quasi.curr)
}
quasi.res <- round(apply(quasi.meas, 1, mean), 4)
quasi.res
## Negative Binomial Monte-Carlo
set.seed(6414)
neg.bin.meas <- matrix(0,4,100)
for (i in 1:100) {
sample.size <- floor(0.8*n)
sample.obs <- sample(seq_len(n), size = sample.size)
train.neg.bin.curr <- clean[sample.obs,]
test.neg.bin.curr <- clean[-sample.obs,]
neg.bin.train <- glm.nb(UPT ~., data = train.neg.bin.curr, link = log, init.theta = 5)
neg.bin.meas[,i] <- prediction(neg.bin.train, test.neg.bin.curr)
}
neg.bin.res <- round(apply(neg.bin.meas, 1, mean), 4)
neg.bin.res
pred.results <- cbind.data.frame(pois.res, quasi.res, neg.bin.res)
pred.results$metric <- c('MSE', 'MAE', 'MAPE', 'PM')
colnames(pred.results) <- c('Poisson', 'Quasi-Poisson', 'Negative Binomial', 'Metrics')
pred.results
